d1314S <- select(d1314, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1415S <- select(d1415, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1516S <- select(d1516, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1617S <- select(d1617, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1718S <- select(d1718, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1819S <- select(d1819, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1920S <- select(d1920, Date:FTAG, Max.2.5:Avg.2.5.1)
d1920S <- select(d1920S, -Time)
d1011 <- read.csv("SP1-1011.csv")
d1112 <- read.csv("SP1-1112.csv")
d1213 <- read.csv("SP1-1213.csv")
d1314 <- read.csv("SP1-1314.csv")
d1415 <- read.csv("SP1-1415.csv")
d1516 <- read.csv("SP1-1516.csv")
d1617 <- read.csv("SP1-1617.csv")
d1718 <- read.csv("SP1-1718.csv")
d1819 <- read.csv("SP1-1819.csv")
d1920 <- read.csv("SP1-1920.csv")
d1011 <- select(d1011, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1112 <- select(d1112, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1213 <- select(d1213, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1314 <- select(d1314, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1415 <- select(d1415, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1516 <- select(d1516, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1617 <- select(d1617, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1718 <- select(d1718, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1819 <- select(d1819, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1920 <- select(d1920, Date:FTAG, Max.2.5:Avg.2.5.1)
d1920 <- select(d1920S, -Time)
d1920 <- select(d1920S, -Time)
d1920 <- select(d1920, -Time)
colnames(d1920)
# Arreglamos las fechas
d1011 <- mutate(d1011, Date = as.Date(Date, format = "%d/%m/%y"))
d1112 <- mutate(d1112, Date = as.Date(Date, format = "%d/%m/%y"))
d1213 <- mutate(d1213, Date = as.Date(Date, format = "%d/%m/%y"))
d1314 <- mutate(d1314, Date = as.Date(Date, format = "%d/%m/%y"))
d1415 <- mutate(d1415, Date = as.Date(Date, format = "%d/%m/%y"))
d1516 <- mutate(d1516, Date = as.Date(Date, format = "%d/%m/%y"))
d1617 <- mutate(d1617, Date = as.Date(Date, format = "%d/%m/%y"))
d1718 <- mutate(d1718, Date = as.Date(Date, format = "%d/%m/%y"))
d1819 <- mutate(d1819, Date = as.Date(Date, format = "%d/%m/%Y"))
d1920 <- mutate(d1920, Date = as.Date(Date, format = "%d/%m/%Y"))
d1019 <- rbind(d1011, d1112, d1213, d1314, d1415, d1516, d1617, d1718, d1819)
# Renombrar columnas
d1019 <- rename(d1019,  Max.2.5.O = BbMx.2.5,
Avg.2.5.O = BbAv.2.5,
Max.2.5.U = BbMx.2.5.1,
Avg.2.5.U = BbAv.2.5.1)
d1920 <- rename(d1920,  Max.2.5.O = Max.2.5,
Avg.2.5.O = Avg.2.5,
Max.2.5.U = Max.2.5.1,
Avg.2.5.U = Avg.2.5.1)
d1019 <- select(d1019, colnames(d1920))
d1020S <- rbind(d1019, d1920)
View(d1020S)
d1019 <- select(d1019, colnames(d1920))
View(d1019)
d1020S <- rename(d1020S, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
data <- select(d1020S, date, home.team, home.score, away.team, away.score:Avg.2.5.U) # Este data frame contiene todos los datos necesarios
View(data)
head(data, n = 2L); tail(data, n = 2L)
md <- data %>% select(date:away.score)
View(md)
# Data frames de partidos y equipos
setwd('D:/Prohoff/git/BeduFinalR')
write.csv(md, "match.data.csv", row.names = FALSE)
write.csv(md, "match.data.csv", row.names = FALSE)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
View(df)
teams <- df$teams; scores <- df$scores
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
# Conjuntos iniciales de entrenamiento y de prueba
f <- scores$date # Fechas de partidos
dim(f)
fu <- unique(f) # Fechas sin repetición
## Hubo 1236 fechas en las que hubo partidos( en algunas fechas hubo varios partidos)
Ym <- format(fu, "%Y-%m") # Meses y años
Ym <- unique(Ym) # Meses y años sin repetir
####
#### Hubo partidos por 101 meses
####
places <- which(Ym[15]==format(scores$date, "%Y-%m")) # Consideramos partidos de 15 meses para comenzar a ajustar el modelo
####
#### Hubo partidos por 101 meses
####
Ym[15]
####
#### Hubo partidos por 101 meses
####
format(scores$date, "%Y-%m")
Ym
ffe <- scores$date[max(places)] # Fecha final conjunto de entrenamiento
# Consideraremos partidos de 15 meses para comenzar a ajustar el modelo. Así, nuestro primer conjunto de entrenamiento consiste de datos de partidos hasta el `r ffe`
date
# Consideraremos partidos de 15 meses para comenzar a ajustar el modelo. Así, nuestro primer conjunto de entrenamiento consiste de datos de partidos hasta el `r ffe`
scores
filter
# Consideraremos partidos de 15 meses para comenzar a ajustar el modelo. Así, nuestro primer conjunto de entrenamiento consiste de datos de partidos hasta el `r ffe`
train <- scores %>% filter(date <= ffe) ## entrenamos desde el inicio del dataset hasta el 18 de dic de 2011
test <- scores %>% filter(date > ffe)   ## los datos posteriores a esa fecha, seran para el test
head(train, n = 1); tail(train, n = 1)
head(test, n = 1); tail(test, n = 1)
traindate <- unique(train$date)
date
testdate <- unique(test$date)
ranks <- rank.teams(scores = scores, teams = teams,
min.date = traindate[1],
max.date = traindate[length(traindate)])
pred <- predict(ranks, date = testdate[1])
# Primera predicción
testdate[1]
phs <- pred$scores$pred.home.score # predicted home score
pas <- pred$scores$pred.away.score # predicted away score
pht <- pred$scores$home.team # home team in predictions
pat <- pred$scores$away.team # away team in predictions
phs <- NULL; pas <- NULL; pht <- NULL; pat <- NULL
for(i in 1:(length(unique(scores$date))-170)){
ranks <- rank.teams(scores = scores, teams = teams,
min.date = unique(scores$date)[i],
max.date = unique(scores$date)[i+170-1],
silent = TRUE,
time.weight.eta = 0.0005)
pred <- predict(ranks, date = unique(scores$date)[i+170],
silent = TRUE)
phs <- c(phs, pred$scores$pred.home.score) # predicted home score
pas <- c(pas, pred$scores$pred.away.score) # predicted away score
pht <- c(pht, pred$scores$home.team) # home team in predictions
pat <- c(pat, pred$scores$away.team) # away team in predictions
}
buenos <- !(is.na(phs) | is.na(pas)) #
# Eliminamos NA's
fu
# Eliminamos NA's
fu
buenos <- !(is.na(phs) | is.na(pas)) #
# Eliminamos NA's
phs
# Eliminamos NA's
pat
buenos <- !(is.na(phs) | is.na(pas)) #
phs <- phs[buenos] # predicted home score
pas <- pas[buenos] # predicted away score
pht <- pht[buenos] # home team in predictions
pat <- pat[buenos] # away team in predictions
scores$date)[171]
unique(scores$date)[171]
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio <- momio[buenos,]
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio
momio <- momio[buenos,]
momio
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio <- momio[buenos,]
mean(pht == momio$home.team); mean(pat == momio$away.team)
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
phs + pas
View(df)
View(scores)
View(train)
mean(pht == momio$home.team); mean(pat == momio$away.team) ## da 1 porque son las medias de los equipos que jugaron????
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
mean(phs + pas < 2.5 & momio$home.score + momio$away.score < 2.5)
hs <- momio$home.score
View(momio)
View(test)
View(scores)
View(data)
mean(pht == momio$home.team); mean(pat == momio$away.team) ## da 1 porque son las medias de los equipos que jugaron????
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
mean(phs + pas < 2.5 & momio$home.score + momio$away.score < 2.5)
hs <- momio$home.score
as <- momio$away.score
mean(phs + pas > 3) # proporción de partidos con más de tres goles según el modelo
# Probabilidades condicionales
phs + pas > 3
# Probabilidades condicionales
mean(phs + pas > 3) # proporción de partidos con más de tres goles según el modelo
mean(phs + pas > 3 & hs + as > 2.5)/mean(phs + pas > 3)
# Probabilidades condicionales
hs + as > 2.5
# Probabilidades condicionales
phs
hs
pas
# Probabilidades condicionales
phs+pas
hs+as
mean(phs + pas < 2.1) # proporción de partidos con menos de 2.1 goles según el modelo
mean(phs + pas < 2.1 & hs + as < 2.5)/mean(phs + pas < 2.1) # probabilidad condicional estimada de ganar en under 2.5
mean(phs + pas > 3 & hs + as > 2.5)/mean(phs + pas > 3) # probabilidad condicional estimada de ganar en over 2.5
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
else cap <- cap - 1000
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
View(g)
View(g)
# Escenario con momios máximos
typeof(g)
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
# Escenario con momios máximos
typeof(g)
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
# Escenario con momios máximos
typeof(g)
View(g)
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
# Escenario con momios máximos
typeof(g)
g[["Num_Ap"]]
# Escenario con momios máximos
g
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
View(g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "Número de juego",
y = "Capital",
title = "Realizando una secuencia de juegos") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ángulo y estilo de las abcisas y ordenadas
p
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Avg.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Avg.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Avg.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Avg.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "Número de juego",
y = "Capital",
title = "Realizando una secuencia de juegos") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ángulo y estilo de las abcisas y ordenadas
p
library(dplyr)
library(reshape2)
library(ggplot2)
url1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
utl1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
url1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
setwd('~/Bedu/R/Sesion 3/Data')
getwd()
download.file(url=url1718,destfile = 'D1-1718.csv',mode='wb')
download.file(url=url1819,destfile = 'D1-1819.csv',mode='wb')
download.file(url=url1920,destfile = 'D1-1920.csv',mode='wb')
download.file(url=url1819,destfile = 'D1-1819.csv',mode='wb')
url1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
download.file(url=url1819,destfile = 'D1-1819.csv',mode='wb')
lista <- lapply(dir(), read.csv)
#vemos los datos que tenemos
str(d1718); str(d1819); str(d1920)
# guardamos los archivos
url1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
url1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
url1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
#cargamos los archivos
d1718 <- read.csv(file = url1718) # Importación de los datos a R
d1819 <- read.csv(file = url1819)
d1920 <- read.csv(file = url1920)
#vemos los datos que tenemos
str(d1718); str(d1819); str(d1920)
head(d1718); head(d1819); head(d1920)
View(d1718); View(d1819); View(d1920)
summary(d1718); summary(d1819); summary(d1920)
#cargamos los archivos
lista <- lapply(dir(), read.csv)
str(lista)
head(lista)
View(lista)
lista <- lapply(lista,select,c(Date,HomeTeam:FTR))
#cargamos los archivos
lista <- lapply(dir(), read.csv)
#seleccionamos las columnas que queremos
lista <- lapply(lista,select,c(Date,HomeTeam:FTR))
View(lista)
?as.Date
lista[1] <- lapply(lista[1], mutate, Date = as.Date(Date,"%d/%m/%y"))
lista[2] <- lapply(lista[2], mutate, Date = as.Date(Date,"%d/%m/%Y"))
lista[3] <- lapply(lista[3], mutate, Date = as.Date(Date,"%d/%m/%Y"))
lapply(lista, str)
#cargamos los archivos
lista <- lapply(dir(), read.csv)
#seleccionamos las columnas que queremos
lista <- lapply(lista,select,c(Date,HomeTeam:FTR))
lapply(lista, str)
lista[1] <- lapply(lista[1], mutate, Date = as.Date(Date,"%d/%m/%y"))
lista[2] <- lapply(lista[2], mutate, Date = as.Date(Date,"%d/%m/%Y"))
lista[3] <- lapply(lista[3], mutate, Date = as.Date(Date,"%d/%m/%Y"))
# transformamos la columan de fecha en tipo fecha
lista[1] <- lapply(lista[1], mutate, Date = as.Date(Date,"%d/%m/%y"))
lista[2] <- lapply(lista[2], mutate, Date = as.Date(Date,"%d/%m/%Y"))
lista[3] <- lapply(lista[3], mutate, Date = as.Date(Date,"%d/%m/%Y"))
lapply(lista, str)
datos <- do.call(rbind,lista)
View(datos)
#analizamos los contenidos de datos
dim(datos)
str(datos)
tail(datos)
View(datos)
summary(datos)
datos$FTHG
table(datos$FTHG)
(datos$FTHG)
table(datos$FTHG)
?table
table(datos$FTHG)/dim(datos)
table(datos$FTHG)/dim(datos)[1]
conjunta <- data.frame(local=datos$FTHG, visitante=datos$FTAG)
conjunta
frecuencia.conjunta <- table(conjunta)
frecuencia.conjunta
table(datos$FTHG)/dim(datos)[1]
frecuencia.local <- table(datos$FTHG)
frecuencia.visitante <- table(datos$FTAG)
frecuencia.conjunta <- table(conjunta)
marginal.local <- prop.table(frecuencia.local)
marginal.visitante <- prop.table(frecuencia.visitante)
marginal.conjunta <- data.frame(rbind(prop.table(frecuencia.conjunta)))
marginal.conjunta
table(datos$FTHG)/dim(datos)[1]
# Probabilidades marginales estimadas para los equipos que juegan en casa
(pcasa <- round(table(datos$FTHG)/dim(datos)[1], 3))
(pvisita <- round(table(data$FTAG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan como visitante
(pvisita <- round(table(datos$FTAG)/dim(datos)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan como visitante
(pcta <- round(table(datos$FTHG, datos$FTAG)/dim(datos)[1], 3)) # Probabilidades conjuntas estimadas para los partidos
round(marginal.conjunta)
round(marginal.conjunta,2)
round(marginal.conjunta,3)
t
t
(pcta <- round(table(datos$FTHG, datos$FTAG)/dim(datos)[1], 3)) # Probabilidades conjuntas estimadas para los partidos
round(marginal.conjunta,3)
pcasa <- as.data.frame(pcasa)
str(pcasa)
pcasa
pcasa <- pcasa %>% rename(goles = Var1, FRel = Freq)
tail(pcasa)
p <- ggplot(pcasa, aes(x = goles, y = FRel)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
p
barplot(marginal.local, main="Probabilidad de anotar goles como local")
pvisita <- as.data.frame(pvisita)
pvisita <- rename(pvisita, goles = Var1, FRel = Freq)
tail(pvisita)
p <- ggplot(pvisita, aes(x = goles, y = FRel)) +
geom_bar (stat="identity", fill = 'red') +
ggtitle('Equipo visitante')
p
barplot(marginal.visitante, main="Probabilidad de anotar goles como visitante")
pcta <- melt(pcta) # Función del paquete reshape2
pcta <- rename(pcta, gcasa = Var1, gvisita = Var2, ProbEst = value)
pcta %>% ggplot(aes(gcasa, gvisita)) +
geom_tile(aes(fill = ProbEst)) +
ggtitle('Probabilidades conjuntas estimadas')+
scale_fill_gradient(low = 'white', high = 'purple') +
theme(axis.text.x = element_text(angle = 90,hjust = 0))
heatmap(frecuencia.conjunta,
Rowv = NA,
Colv = NA,
main ="Goles"
)
pcta %>% ggplot(aes(gcasa, gvisita)) +
geom_tile(aes(fill = ProbEst)) +
ggtitle('Probabilidades conjuntas estimadas')+
scale_fill_gradient(low = 'white', high = 'purple') +
theme(axis.text.x = element_text(angle = 90,hjust = 0))
shiny::runApp('~/Bedu/R/Sesion 8/ejemploShinyWebApp')
runApp('~/Bedu/R/Sesion 8/ejemploShinyWebApp')
runApp('~/Bedu/R/Sesion 8/ejemploShinyWebApp')
runApp('~/Bedu/R/Sesion 8/ejemploShinyWebApp')
setwd("~/Bedu/R/Sesion 8")
runApp('Reto1')
runApp('ejemploShinyWebApp')
runApp('Reto1')
runApp('ejemploShinyWebApp')
library(dplyr)
library(tidyr)
library(reshape)
iris <- iris[,-5]
attach(iris)
mc.iris <- cor(iris)
mc.irism <- melt(mc.iris)
# Gráfico de correlaciones
mc.irism %>% ggplot(aes(X1, X2)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient(low = 'green', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
runApp('Reto1')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
runApp('D:/Prohoff/git/BeduFinalR/Dashboard')
match.data.csv <- read.csv("www/match.data.csv", header = TRUE)
setwd("D:/Prohoff/git/BeduFinalR/Dashboard")
match.data.csv <- read.csv("www/match.data.csv", header = TRUE)
colnames(match.data.csv)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
match.data.csv <- read.csv("www/match.data.csv", header = TRUE)
colnames(match.data.csv)
head(match.data.csv)
runApp()
summary(match.data.csv)
match.data.csv$home.team <- factor(match.data.csv$home.team)
summary(match.data.csv)
runApp()
runApp('~/Bedu/R/Sesion 8/Reto1')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot <- ggplot(match.data.csv, aes(x=input$x,y=home.team))+
geom_bar(stat="identity")+
facet_wrap(vars(away.team));
plot
plot <- ggplot(match.data.csv, aes(x=home.score,y=home.team))+
geom_bar(stat="identity")+
facet_wrap(vars(away.team));
plot <- ggplot(match.data.csv, aes(x=home.score,y=home.team))+
geom_bar(stat="identity")+
facet_wrap(vars(away.team));
plot
plot <- ggplot(match.data.csv, aes(x=away.score,y=home.team))+
geom_bar(stat="identity")+
facet_wrap(vars(away.team));
plot
runApp()
runApp()
runApp()
runApp()
runApp()
